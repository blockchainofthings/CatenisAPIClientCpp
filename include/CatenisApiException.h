//  CatenisApiException.h
//
//  Created by R. Benson Evans on 2/20/2018.
//
#ifndef __CATENISAPIEXCEPTION_H__
#define __CATENISAPIEXCEPTION_H__

#include <iostream>
#include <sstream>
#include <string>

#include <CatenisApiInternals.h>

namespace ctn
{

/*
 * Catenis Exceptions (base class) to be thrown or for catching all errors.
 *
 * @member errorMessage : A description of the error.
 */
class CatenisAPIException
{
    public:
    CatenisAPIException(std::string error_message) : errorMessage(error_message) {}
    virtual ~CatenisAPIException() {}

    virtual std::string getErrorMessage() {return(errorMessage);}
    virtual std::string getErrorDescription() { return("Client error: " + errorMessage); }

    protected:
	std::string errorMessage; 
};

/*
 * Catenis Exceptions to be thrown on errors generated by the API methods.
 * This Exception will be called for HTTP status codes != 200.
 *
 * @member httpStatusCode : The http server error code.
 * @member jsonMessage : The returned Json string from the Catenis servers.
 * @member jsonErrorMessage : The parsed out error message contained in the Json string.
 *
 */
class CatenisAPIError : public CatenisAPIException
{
    public:
    CatenisAPIError(std::string error_message, int http_status_code=0, std::string json_message="") 
        : CatenisAPIException(error_message), httpStatusCode(http_status_code), jsonMessage(json_message) {} 
    ~CatenisAPIError() {}

    // If a proper json object was not returned or the json error message
    // was not included use the HTTP Status Message.
    virtual std::string getErrorDescription() 
    {
        // Find the returned message text.
        jsonErrorMessage =  CtnApiInternals::parseJsonForKeyValue(jsonMessage, "message");

        std::ostringstream oss; 
        if (jsonErrorMessage.empty())
            oss << "API error: [" << httpStatusCode << "]-" << errorMessage;
        else
            oss << "API error: [" << httpStatusCode << "]-" << jsonErrorMessage;
        return(oss.str());
    }

    int getHttpStatusCode() {return(httpStatusCode);}
    std::string getJsonMessage() {return(jsonMessage);}

    private:
	int httpStatusCode;
	std::string jsonMessage; 
    std::string jsonErrorMessage;
};

/*
 * Catenis Exceptions to be thrown on errors generated by the client methods.
 *
 */
class CatenisClientError : public CatenisAPIException
{
    public:
    CatenisClientError(std::string error_message) : CatenisAPIException(error_message) {} 
    ~CatenisClientError() {}
};

/*
 * Catenis Exceptions to be thrown for errors encountered during parsing the message fields.
 *
 */
class CatenisAPIMessageFormatError : public CatenisAPIException
{
    public:
    CatenisAPIMessageFormatError(std::string error_message) : CatenisAPIException(error_message) {} 
    ~CatenisAPIMessageFormatError() {}
};

/*
 * Catenis API Exceptions with a 200 status code and a json error message.
 *
 */
class CatenisAPIResponseMessageError : public CatenisAPIException
{
    public:
    CatenisAPIResponseMessageError(std::string error_message) : CatenisAPIException(error_message) {} 
    ~CatenisAPIResponseMessageError() {}

    virtual std::string getErrorDescription() { return("API error: " + errorMessage); }
};


}
#endif
